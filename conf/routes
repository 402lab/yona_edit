# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                               controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                   controllers.Assets.at(path="/public", file)

# User
GET     /users/login                                    controllers.UserApp.login()
POST    /users/login                                    controllers.UserApp.authenticate()
GET     /users/logout                                   controllers.UserApp.logout()
GET     /users/signup                                   controllers.UserApp.signup()
POST    /users/signup                                   controllers.UserApp.saveUser()
GET     /info                                           controllers.UserApp.info()
GET     /memberinfo                                     controllers.UserApp.memberInfo(userId:Long)
GET     /info/edit                                      controllers.UserApp.edit()
GET     /memberinfo/edit                                controllers.UserApp.memberEdit(userId:Long)
POST    /info/edit                                      controllers.UserApp.save()

# Site
GET     /sites/setting                                  controllers.SiteApp.setting()
GET     /sites/mail                                     controllers.SiteApp.writeMail()
POST    /sites/mail                                     controllers.SiteApp.sendMail()
GET     /sites/userList                                 controllers.SiteApp.userList(pageNum: Int ?= 0, loginId: String ?= null)
POST    /sites/userList                                 controllers.SiteApp.searchUser()
GET     /sites/user/delete                              controllers.SiteApp.deleteUser(userId: Long)
GET     /sites/projectList                              controllers.SiteApp.projectList(filter:String ?= "")
GET     /sites/project/delete/:projectId                controllers.SiteApp.deleteProject(projectId:Long)
GET     /sites/softwareMap                              controllers.SiteApp.softwareMap()

# Attachments
GET     /files                                          controllers.AttachmentApp.getFileList()
POST    /files                                          controllers.AttachmentApp.newFile()
GET     /files/:id                                      controllers.AttachmentApp.getFile(id: Long)
GET     /files/:id/?                                    controllers.AttachmentApp.getFile(id: Long)
POST    /files/:id/?                            		controllers.AttachmentApp.deleteFile(id: Long)
POST    /files/:id                            			controllers.AttachmentApp.deleteFile(id: Long)

# Boards
GET     /:user/:projectName/boardList                   controllers.BoardApp.posts(user:String, projectName:String)
GET     /:user/:projectName/boards/new                  controllers.BoardApp.newPost(user:String, projectName:String)
POST    /:user/:projectName/boards/new                  controllers.BoardApp.savePost(user:String, projectName:String)
GET     /:user/:projectName/board/:id                   controllers.BoardApp.post(user:String, projectName:String, id:Long)
POST    /:user/:projectName/board/:id/replay            controllers.BoardApp.saveComment(user:String, projectName:String, id:Long)
GET     /:user/:projectName/board/:id/delete            controllers.BoardApp.deletePost(user:String, projectName:String, id:Long)
GET     /:user/:projectName/board/:id/edit              controllers.BoardApp.editPost(user:String, projectName:String, id:Long)
POST    /:user/:projectName/board/:id/edit              controllers.BoardApp.updatePost(user:String, projectName:String, id:Long)
GET     /:user/:projectName/board/:id/delete/:commentId controllers.BoardApp.deleteComment(user:String, projectName:String, id:Long, commentId:Long)

# Projects
GET     /projects/new                                   controllers.ProjectApp.newProject()
POST    /projects/new                                   controllers.ProjectApp.saveProject()
GET     /projectList                                    controllers.ProjectApp.projects(filter:String ?= "")
GET     /:userName/:projectName                         controllers.ProjectApp.project(userName: String, projectName:String)
GET     /:userName/:projectName/setting                 controllers.ProjectApp.setting(userName: String, projectName:String)
POST    /:userName/:projectName/setting                 controllers.ProjectApp.saveSetting(userName: String, projectName:String)
GET     /:userName/:projectName/delete                  controllers.ProjectApp.deleteProject(userName: String, projectName:String)
GET     /:userName/:projectName/memberList              controllers.ProjectApp.members(userName: String, projectName:String)
POST    /:userName/:projectName/members/new             controllers.ProjectApp.newMember(userName: String, projectName:String)
POST    /:userName/:projectName/member/edit             controllers.ProjectApp.updateMember(userName: String, projectName:String, userId:Long)
GET     /:userName/:projectName/member/delete           controllers.ProjectApp.deleteMember(userName: String, projectName:String, userId:Long)

# Milestones
GET     /:userName/:projectName/milestoneList           controllers.MilestoneApp.milestones(userName: String, projectName:String)
GET     /:userName/:projectName/milestones/manage       controllers.MilestoneApp.manageMilestones(userName: String, projectName:String)
GET     /:userName/:projectName/milestones/new          controllers.MilestoneApp.newMilestone(userName: String, projectName:String)
POST    /:userName/:projectName/milestones/new          controllers.MilestoneApp.saveMilestone(userName: String, projectName:String)
POST    /:userName/:projectName/milestone/:id/edit      controllers.MilestoneApp.updateMilestone(userName: String, projectName:String, id: Long)
GET     /:userName/:projectName/milestone/:id/delete    controllers.MilestoneApp.deleteMilestone(userName: String, projectName:String, id: Long)
GET     /:userName/:projectName/milestone/:id/edit      controllers.MilestoneApp.editMilestone(userName: String, projectName:String, id: Long)

# Issues
GET     /:userName/:projectName/issueList               controllers.IssueApp.issues(userName:String, projectName:String, state:String)
GET     /:userName/:projectName/issueList/autonotify    controllers.IssueApp.enrollAutoNotification(userName:String, projectName:String)
GET     /:userName/:projectName/issueList/excel         controllers.IssueApp.extractExcelFile(userName:String, projectName:String, state:String)
GET     /:userName/:projectName/issues/new              controllers.IssueApp.newIssue(userName:String, projectName:String)
POST    /:userName/:projectName/issues/new              controllers.IssueApp.saveIssue(userName:String, projectName:String)
GET     /:userName/:projectName/issues/:id              controllers.IssueApp.issue(userName:String, projectName:String, id:Long)
POST    /:userName/:projectName/issue/:id/reply         controllers.IssueApp.saveComment(userName:String, projectName:String, id:Long)
GET     /:userName/:projectName/issue/:id/delete        controllers.IssueApp.deleteIssue(userName:String, projectName:String, id:Long)
GET     /:userName/:projectName/issue/:id/deleteComment controllers.IssueApp.deleteComment(userName:String, projectName:String, id:Long, commentId:Long)
GET     /:userName/:projectName/issues/:id/edit         controllers.IssueApp.editIssue(userName:String, projectName:String, id:Long)
POST    /:userName/:projectName/issues/:id/edit         controllers.IssueApp.updateIssue(userName:String, projectName:String, id:Long)
GET		/issuedetail									controllers.IssueApp.getIssueDatil()

# Label
POST	/:userName/:projectName/labels					controllers.IssueLabelApp.post(userName:String, projectName:String)
GET		/:userName/:projectName/labels					controllers.IssueLabelApp.getAll(userName:String, projectName:String)
POST	/:userName/:projectName/labels/:id		  	    controllers.IssueLabelApp.delete(userName:String, projectName:String, id:Long)

# Git
GET     /:ownerName/:projectName/info/refs                                        controllers.GitApp.advertise(ownerName:String, projectName:String)
POST    /:ownerName/:projectName/$service<git-upload-pack|git-receive-pack>       controllers.GitApp.serviceRpc(ownerName:String, projectName:String, service:String)

# SVN
HEAD    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
GET     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
OPTIONS /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
DELETE  /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
PUT     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /!svn-fake/sevice/                              controllers.SvnApp.service()

# Code
#for AJAX
GET     /:user/:projectName/code/!                      controllers.CodeApp.ajaxRequest(user:String, projectName:String, path = "")
GET     /:user/:projectName/code/!/                     controllers.CodeApp.ajaxRequest(user:String, projectName:String, path = "")
GET     /:user/:projectName/code/!/*path                controllers.CodeApp.ajaxRequest(user:String, projectName:String, path:String)
GET     /:user/:projectName/code/:branch/!              controllers.CodeApp.ajaxRequestWithBranch(user:String, projectName:String, branch:String, path="")
GET     /:user/:projectName/code/:branch/!/             controllers.CodeApp.ajaxRequestWithBranch(user:String, projectName:String, branch:String, path="")
GET     /:user/:projectName/code/:branch/!/*path        controllers.CodeApp.ajaxRequestWithBranch(user:String, projectName:String, branch:String, path:String)
#for normal
GET     /:user/:projectName/code                        controllers.CodeApp.codeBrowser(user:String, projectName:String)
GET     /:user/:projectName/rawcode/*path               controllers.CodeApp.showRawFile(user:String, projectName:String, path:String)
GET     /:user/:projectName/code/:branch                controllers.CodeApp.codeBrowserWithBranch(user:String, projectName:String, branch:String) 

# Commits
GET     /:user/:projectName/commits                     controllers.CodeHistoryApp.historyUntilHead(user:String, projectName:String)
GET     /:user/:projectName/commits/:branch             controllers.CodeHistoryApp.history(user:String, projectName:String, branch:String)
GET     /:user/:projectName/commit/:id                  controllers.CodeHistoryApp.show(user:String, projectName:String, id:String)

# Search
GET     /:userName/:projectName/search                  controllers.SearchApp.contentsSearch(userName: String, projectName: String)

#task
GET     /:userName/:projectName/task                    controllers.TaskApp.index(userName:String, projectName:String)
GET     /:userName/:projectName/task/labels             controllers.TaskApp.getLabels(userName:String, projectName:String)
GET     /:userName/:projectName/task/member             controllers.TaskApp.getMember(userName:String, projectName:String)
GET     /:userName/:projectName/task/connect            controllers.TaskApp.connect(userName:String, projectName:String)
GET     /:userName/:projectName/task/card/:cardId          controllers.TaskApp.card(userName:String, projectName:String, cardId:Long)
GET     /:userName/:projectName/task/card               controllers.TaskApp.cardView(userName:String, projectName:String)
POST    /:userName/:projectName/task/newCard            controllers.TaskApp.newCard(userName:String, projectName:String)
POST    /:userName/:projectName/task/card               controllers.TaskApp.saveCard(userName:String, projectName:String)
POST    /:userName/:projectName/task/comment            controllers.TaskApp.addComment(userName:String, projectName:String)

# Help
GET     /help                                           controllers.HelpApp.help()

# Statistics
GET     /:userName/:projectName/statistics              controllers.StatisticsApp.statistics(userName:String, projectName:String)
GET     /:userName										controllers.UserApp.userInfo(userName:String)
