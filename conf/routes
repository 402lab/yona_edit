# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                   controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                       controllers.Assets.at(path="/public", file)

# User
GET     /users/login                            controllers.UserApp.login()
POST    /users/login                            controllers.UserApp.authenticate()
GET     /users/logout                           controllers.UserApp.logout()
GET     /users/signup                           controllers.UserApp.signup()
POST    /users/signup                           controllers.UserApp.saveUser()

# Site
GET     /sites/setting                      controllers.SiteApp.setting()
GET     /sites/userList                     controllers.SiteApp.userList(pageNum: Int ?= 0, loginId: String ?= null)
POST    /sites/userList                     controllers.SiteApp.searchUser()
GET     /sites/user/delete                  controllers.SiteApp.deleteUser(userId: Long)
GET     /sites/projectList                  controllers.SiteApp.projectList()
GET     /sites/softwareMap                  controllers.SiteApp.softwareMap()

# Boards
GET     /:ownerName/:projectName/boardList                 controllers.BoardApp.posts(ownerName:String, projectName:String)
GET     /:ownerName/:projectName/boards/new                controllers.BoardApp.newPost(ownerName:String, projectName:String)
POST    /:ownerName/:projectName/boards/new                controllers.BoardApp.savePost(ownerName:String, projectName:String)
GET     /:ownerName/:projectName/board/:id                 controllers.BoardApp.post(ownerName:String, projectName:String, id:Long)
POST    /:ownerName/:projectName/board/:id/replay          controllers.BoardApp.saveComment(ownerName:String, projectName:String, id:Long)
GET     /:ownerName/:projectName/board/:id/delete          controllers.BoardApp.deletePost(ownerName:String, projectName:String, id:Long)
GET     /:ownerName/:projectName/board/:id/edit            controllers.BoardApp.editPost(ownerName:String, projectName:String, id:Long)
POST    /:ownerName/:projectName/board/:id/edit            controllers.BoardApp.updatePost(ownerName:String, projectName:String, id:Long)

# Projects
GET     /projects/new                           controllers.ProjectApp.newProject()
POST    /projects/new                           controllers.ProjectApp.saveProject()
GET     /:userName/:projectName                 controllers.ProjectApp.project(userName: String, projectName:String)
GET     /:userName/:projectName/setting         controllers.ProjectApp.setting(userName: String, projectName:String)
POST    /:userName/:projectName/setting         controllers.ProjectApp.saveSetting(userName: String, projectName:String)
GET     /:userName/:projectName/delete          controllers.ProjectApp.deleteProject(userName: String, projectName:String)
GET     /:userName/:projectName/memberList      controllers.ProjectApp.members(userName: String, projectName:String)
POST    /:userName/:projectName/members/new     controllers.ProjectApp.newMember(userName: String, projectName:String)
POST    /:userName/:projectName/member/edit     controllers.ProjectApp.updateMember(userName: String, projectName:String, userId:Long)
GET     /:userName/:projectName/member/delete   controllers.ProjectApp.deleteMember(userName: String, projectName:String, userId:Long)

# Milestones
GET     /:projectName/milestoneList             controllers.MilestoneApp.milestones(projectName:String, state ?= "open", sort ?= "dueDate", direction ?= "asc")
GET     /:projectName/milestones/manage         controllers.MilestoneApp.manageMilestones(projectName:String, sort ?= "dueDate", direction ?= "asc")
GET     /:projectName/milestones/new            controllers.MilestoneApp.newMilestone(projectName:String)
POST    /:projectName/milestones/new            controllers.MilestoneApp.saveMilestone(projectName:String)
POST    /:projectName/milestone/:id/edit        controllers.MilestoneApp.updateMilestone(projectName:String, id: Long)
GET     /:projectName/milestone/:id/delete      controllers.MilestoneApp.deleteMilestone(projectName:String, id: Long)
GET     /:projectName/milestone/:id/edit        controllers.MilestoneApp.editMilestone(projectName:String, id: Long)

# Issues
GET     /:user/:project/issueList                 controllers.IssueApp.issues(user:String, project:String, stateType:String)
GET     /:user/:project/issues/new                controllers.IssueApp.newIssue(user:String, project:String)
POST    /:user/:project/issues/new                controllers.IssueApp.saveIssue(user:String, project:String)
GET     /:user/:project/issues/:id                controllers.IssueApp.issue(user:String, project:String, id:Long)
POST    /:user/:project/issue/:id/reply           controllers.IssueApp.saveComment(user:String, project:String, id:Long)
GET     /:user/:project/issue/:id/delete          controllers.IssueApp.deleteIssue(user:String, project:String, id:Long)
GET     /:user/:project/issue/:id/deleteComment   controllers.IssueApp.deleteComment(user:String, project:String, id:Long, commentId:Long)
GET     /:user/:project/issueList/excel           controllers.IssueApp.extractExcelFile(user:String, project:String, stateType:String)
GET     /:user/:project/issues/:id/edit           controllers.IssueApp.editIssue(user:String, project:String, id:Long)
POST    /:user/:project/issues/:id/edit           controllers.IssueApp.updateIssue(user:String, project:String, id:Long)
GET     /:user/:project/issueList/autonotify      controllers.IssueApp.enrollAutoNotification(user:String, project:String)

# Git
GET     /:projectName/info/refs                                        controllers.GitApp.advertise(projectName:String, service:String)
POST    /:projectName/$service<git-upload-pack|git-receive-pack>       controllers.GitApp.serviceRpc(projectName:String, service:String)

# SVN
HEAD    /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
GET     /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
POST    /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
OPTIONS /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
DELETE  /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
PUT     /svn/*path          controllers.SvnApp.serviceWithPath(path:String)
POST    /!svn-fake/sevice/  controllers.SvnApp.service()

# Code
#for AJAX
GET     /:ownerName/:projectName/code/!         controllers.CodeApp.ajaxRequest(ownerName:String, projectName:String, path = "")
GET     /:ownerName/:projectName/code/!/        controllers.CodeApp.ajaxRequest(ownerName:String, projectName:String, path = "")
GET     /:ownerName/:projectName/code/!/*path   controllers.CodeApp.ajaxRequest(ownerName:String, projectName:String, path:String)
#for normal
GET     /:ownerName/:projectName/code           controllers.CodeApp.view(ownerName:String, projectName:String, path:String = "")
GET     /:ownerName/:projectName/code/          controllers.CodeApp.view(ownerName:String, projectName:String, path:String = "")
GET     /:ownerName/:projectName/code/*path     controllers.CodeApp.view(ownerName:String, projectName:String, path:String)
