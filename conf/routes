# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                               controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                   controllers.Assets.at(path="/public", file)
GET     /messages.js                                    controllers.Application.jsMessages()

# User
GET     /users/login                                    controllers.UserApp.login()
POST    /users/login                                    controllers.UserApp.authenticate()
GET     /users/logout                                   controllers.UserApp.logout()
GET     /users/signup                                   controllers.UserApp.signup()
POST    /users/signup                                   controllers.UserApp.saveUser()
GET     /info                                           controllers.UserApp.info()
POST	/info/leave/:user/:project  				    controllers.UserApp.leave(user, project)
GET     /memberinfo                                     controllers.UserApp.memberInfo(userId:Long)
GET     /info/edit                                      controllers.UserApp.edit()
GET     /memberinfo/edit                                controllers.UserApp.memberEdit(userId:Long)
POST    /info/edit                                      controllers.UserApp.save()

# Site
GET     /sites/setting                                  controllers.SiteApp.setting()
GET     /sites/mail                                     controllers.SiteApp.writeMail()
POST    /sites/mail                                     controllers.SiteApp.sendMail()
GET     /sites/userList                                 controllers.SiteApp.userList(pageNum: Int ?= 0, loginId: String ?= null)
POST    /sites/userList                                 controllers.SiteApp.searchUser()
GET     /sites/user/delete                              controllers.SiteApp.deleteUser(userId: Long)
GET     /sites/projectList                              controllers.SiteApp.projectList(filter:String ?= "")
GET     /sites/project/delete/:projectId                controllers.SiteApp.deleteProject(projectId:Long)
GET     /sites/softwareMap                              controllers.SiteApp.softwareMap()

# Attachments
GET     /files                                          controllers.AttachmentApp.getFileList()
POST    /files                                          controllers.AttachmentApp.newFile()
GET     /files/:id                                      controllers.AttachmentApp.getFile(id: Long)
GET     /files/:id/?                                    controllers.AttachmentApp.getFile(id: Long)
POST    /files/:id/?                            		controllers.AttachmentApp.deleteFile(id: Long)
POST    /files/:id                            			controllers.AttachmentApp.deleteFile(id: Long)

# Boards
GET     /:user/:project/posts                           controllers.BoardApp.posts(user, project)
GET     /:user/:project/postform                        controllers.BoardApp.newPostForm(user, project)
POST    /:user/:project/posts                           controllers.BoardApp.newPost(user, project)
GET     /:user/:project/post/:id                        controllers.BoardApp.post(user, project, id:Long)
POST    /:user/:project/post/:id/comment/new            controllers.BoardApp.newComment(user, project, id:Long)
GET     /:user/:project/post/:id/delete                 controllers.BoardApp.deletePost(user, project, id:Long)
GET     /:user/:project/post/:id/editform               controllers.BoardApp.editPostForm(user, project, id:Long)
POST    /:user/:project/post/:id/edit                   controllers.BoardApp.editPost(user, project, id:Long)
GET     /:user/:project/post/:id/comment/:commentId/delete     controllers.BoardApp.deleteComment(user, project, id:Long, commentId:Long)

# Projects
GET     /projectform                                    controllers.ProjectApp.newProjectForm()
POST    /projects                                       controllers.ProjectApp.newProject()
GET     /projects                                       controllers.ProjectApp.projects(filter:String ?= "", state: String ?= "all")
GET     /:user/:project                                 controllers.ProjectApp.project(user, project)
GET     /:user/:project/settingform                     controllers.ProjectApp.settingForm(user, project)
POST    /:user/:project/setting                         controllers.ProjectApp.settingProject(user, project)
GET     /:user/:project/delete                          controllers.ProjectApp.deleteProject(user, project)
GET     /:user/:project/members                         controllers.ProjectApp.members(user, project)
POST    /:user/:project/members                         controllers.ProjectApp.newMember(user, project)
POST    /:user/:project/member/:id/edit                 controllers.ProjectApp.editMember(user, project, id:Long)
GET     /:user/:project/member/:id/delete               controllers.ProjectApp.deleteMember(user, project, id:Long)

# Milestones
GET     /:user/:project/milestones                      controllers.MilestoneApp.milestones(user, project)
GET     /:user/:project/milestones/manage               controllers.MilestoneApp.manageMilestones(user, project)
GET     /:user/:project/newMilestoneForm                controllers.MilestoneApp.newMilestoneForm(user, project)
POST    /:user/:project/milestones                      controllers.MilestoneApp.newMilestone(user, project)
GET     /:user/:project/milestone/:id/editform          controllers.MilestoneApp.editMilestoneForm(user, project, id: Long)
POST    /:user/:project/milestone/:id/edit              controllers.MilestoneApp.editMilestone(user, project, id: Long)
GET     /:user/:project/milestone/:id/delete            controllers.MilestoneApp.deleteMilestone(user, project, id: Long)

# Issues
GET     /:user/:project/issueList                       controllers.IssueApp.issues(user, project, state:String ?= "open", format:String ?= "html")
GET     /:user/:project/issueList/autonotify            controllers.IssueApp.enrollAutoNotification(user, project)
GET     /:user/:project/issues/new                      controllers.IssueApp.newIssue(user, project)
POST    /:user/:project/issues/new                      controllers.IssueApp.saveIssue(user, project)
GET     /:user/:project/issues/:id                      controllers.IssueApp.issue(user, project, id:Long)
POST    /:user/:project/issue/:id/reply                 controllers.IssueApp.saveComment(user, project, id:Long)
GET     /:user/:project/issue/:id/delete                controllers.IssueApp.deleteIssue(user, project, id:Long)
GET     /:user/:project/issue/:id/deleteComment         controllers.IssueApp.deleteComment(user, project, id:Long, commentId:Long)
GET     /:user/:project/issues/:id/edit                 controllers.IssueApp.editIssue(user, project, id:Long)
POST    /:user/:project/issues/:id/edit                 controllers.IssueApp.updateIssue(user, project, id:Long)
GET		/issuedetail									controllers.IssueApp.getIssueDatil()

# Label
POST	/:user/:project/labels					        controllers.IssueLabelApp.post(user, project)
GET		/:user/:project/labels					        controllers.IssueLabelApp.getAll(user, project)
POST	/:user/:project/labels/:id		  	            controllers.IssueLabelApp.delete(user, project, id:Long)

# Git
GET     /:ownerName/:project/info/refs                  controllers.GitApp.advertise(ownerName:String, project:String)
POST    /:ownerName/:project/$service<git-upload-pack|git-receive-pack>       controllers.GitApp.serviceRpc(ownerName:String, project:String, service:String)

# SVN
HEAD    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
GET     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
OPTIONS /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
DELETE  /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
PUT     /svn/*path                                      controllers.SvnApp.serviceWithPath(path:String)
POST    /!svn-fake/sevice/                              controllers.SvnApp.service()

# Code
#for AJAX
GET     /:user/:project/code/!                          controllers.CodeApp.ajaxRequest(user, project, path = "")
GET     /:user/:project/code/!/                         controllers.CodeApp.ajaxRequest(user, project, path = "")
GET     /:user/:project/code/!/*path                    controllers.CodeApp.ajaxRequest(user, project, path:String)
GET     /:user/:project/code/:branch/!                  controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path="")
GET     /:user/:project/code/:branch/!/                 controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path="")
GET     /:user/:project/code/:branch/!/*path            controllers.CodeApp.ajaxRequestWithBranch(user, project, branch:String, path:String)
#for normal
GET     /:user/:project/code                            controllers.CodeApp.codeBrowser(user, project)
GET     /:user/:project/rawcode/*path                   controllers.CodeApp.showRawFile(user, project, path:String)
GET     /:user/:project/code/:branch                    controllers.CodeApp.codeBrowserWithBranch(user, project, branch:String) 

# Commits
GET     /:user/:project/commits                         controllers.CodeHistoryApp.historyUntilHead(user, project)
GET     /:user/:project/commits/:branch                 controllers.CodeHistoryApp.history(user, project, branch:String)
GET     /:user/:project/commit/:id                      controllers.CodeHistoryApp.show(user, project, id:String)

# Search
GET     /:user/:project/search                          controllers.SearchApp.contentsSearch(user, project)

#task
GET     /:user/:project/task                            controllers.TaskApp.index(user, project)
GET     /:user/:project/task/labels                     controllers.TaskApp.getLabels(user, project)
GET     /:user/:project/task/member                     controllers.TaskApp.getMember(user, project)
GET     /:user/:project/task/connect                    controllers.TaskApp.connect(user, project)
GET     /:user/:project/task/card/:cardId               controllers.TaskApp.card(user, project, cardId:Long)
GET     /:user/:project/task/card                       controllers.TaskApp.cardView(user, project)
POST    /:user/:project/task/newCard                    controllers.TaskApp.newCard(user, project)
POST    /:user/:project/task/card                       controllers.TaskApp.saveCard(user, project)
POST    /:user/:project/task/comment                    controllers.TaskApp.addComment(user, project)

# Help
GET     /help                                           controllers.HelpApp.help()

# Statistics
GET     /:user/:project/statistics                      controllers.StatisticsApp.statistics(user, project)
GET     /:user										    controllers.UserApp.userInfo(user)
